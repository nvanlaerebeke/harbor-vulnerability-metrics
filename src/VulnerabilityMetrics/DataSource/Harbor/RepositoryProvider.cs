using VulnerabilityMetrics.DataSource.Harbor.Request;

namespace VulnerabilityMetrics.DataSource.Harbor;

internal class RepositoryProvider
{
    private readonly HarborApi _harborApi;
    private readonly Dictionary<string, IEnumerable<string>> _repositories = new();

    public RepositoryProvider(HarborApi harborApi)
    {
        _harborApi = harborApi;
    }

    public async Task<IEnumerable<string>> Get(string project)
    {
        if (_repositories.TryGetValue(project, out var value))
        {
            return value;
        }

        try
        {
            var result = await GetPaginatedResponse(project);
            _repositories.Add(project, result);
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return Enumerable.Empty<string>();
        }
    }

    private async Task<List<string>> GetPaginatedResponse(string project)
    {
        var page = 0;
        var page_size = 100;
        var repositories = new List<string>();
        int lastResponseAmount;
        int startIndex = project.Length + 1;
        
        do
        {
            var request = new GetRepositoriesRequest(project);
            request.SetPagination(++page, page_size);

            var result = await _harborApi.SendAsyncWithListResponse<Repository>(request);
            lastResponseAmount = result.Count;

            repositories.AddRange(result.Select(r => r.Name[startIndex..]).ToList());
        } while (lastResponseAmount > 0);

        return repositories;
    }
}