using Serilog.Core;
using VulnerabilityMetrics.DataSource.Harbor.Request;
// ReSharper disable PossibleMultipleEnumeration

namespace VulnerabilityMetrics.DataSource.Harbor;

internal class RepositoryProvider
{
    private const int CachePeriod = 3600;
    private const int PageSize = 100;
    private readonly HarborApi _harborApi;
    private readonly Logger _log;
    private readonly PeriodicTimer _clearCacheTimer;
    private readonly Dictionary<string, IEnumerable<string>> _repositories = new();

    public RepositoryProvider(HarborApi harborApi, Logger log)
    {
        _harborApi = harborApi;
        _log = log;
        _clearCacheTimer = new PeriodicTimer(TimeSpan.FromSeconds(CachePeriod));
        
        //Cache needs to be cleared now and then
        StartCacheCleanupTimer();
    }

    public async Task<IEnumerable<string>> Get(string project)
    {
        if (_repositories.TryGetValue(project, out var value))
        {
            _log.Information("Returning {Count} repositories from cache", value.Count());
            return value;
        }
        
        try
        {
            _log.Information("Repository cache empty for project {project}, fetching from API", project);
            var result = await GetPaginatedResponse(project);
            _repositories.Add(project, result);
            return result;
        }
        catch (Exception ex)
        {
            _log.Error(ex, "Unable to fetch repositories for project {project}", project);
            return Enumerable.Empty<string>();
        }
    }

    private void StartCacheCleanupTimer()
    {
        Task.Run(async () =>
        {
            _log.Information("Repository cache duration is configured to be {CachePeriod} seconds", CachePeriod);
            while (await _clearCacheTimer.WaitForNextTickAsync())
            {
                _log.Information("Clearing repository cache");
                _repositories.Clear();
            }
        });
    }

    private async Task<List<string>> GetPaginatedResponse(string project)
    {
        var page = 0;
        var repositories = new List<string>();
        int lastResponseAmount;
        var startIndex = project.Length + 1;
        
        do
        {
            var request = new GetRepositoriesRequest(project);
            request.SetPagination(++page, PageSize);

            var result = await _harborApi.SendAsyncWithListResponse<Repository>(request);
            lastResponseAmount = result.Count;

            foreach (var repository in result)
            {
                if (repository.ArtifactCount == 0)
                {
                    _log.Information("Filtering {repository}, no artifacts", repository.Name);
                    continue;
                }
                
                _log.Information("Found repository {name}", repository.Name);
                repositories.Add(repository.Name[startIndex..]);
            }
        } while (lastResponseAmount > 0);

        return repositories;
    }
}