using LanguageExt.Common;
using VulnerabilityMetrics.DataSource.Harbor.Request;

namespace VulnerabilityMetrics.DataSource.Harbor;

internal class RepositoryProvider
{
    private readonly HarborApi _harborApi;
    private List<string> _repositories;
    
    public RepositoryProvider(HarborApi harborApi)
    {
        _harborApi = harborApi;
    }

    public async Task<Result<List<string>>> Get(string project)
    {
        if (_repositories is not null)
        {
            return new Result<List<string>>(_repositories);
        }

        try
        {
            _repositories = await GetPaginatedResponse(project);
            return new Result<List<string>>(_repositories);
        }
        catch (Exception ex)
        {
            return new Result<List<string>>(new Exception($"[Error] {ex.Message}"));
        }
    }

    private async Task<List<string>> GetPaginatedResponse(string project)
    {
        var page = 0;
        var page_size = 100;
        var repositories = new List<string>();
        int lastResponseAmount;
        
        do
        {
            var request = new GetRepositoriesRequest(project);
            request.SetPagination(++page, page_size);
            
            var result = await _harborApi.SendAsyncWithListResponse<Repository>(request);
            lastResponseAmount = result.Count;
            
            repositories.AddRange(result.Select(r => r.Name).ToList());
        } while (lastResponseAmount > 0);

        return repositories;
    }
}