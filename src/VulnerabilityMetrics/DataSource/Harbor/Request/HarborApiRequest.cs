using System.Collections.Specialized;
using System.Text.Json;
using System.Web;

namespace VulnerabilityMetrics.DataSource.Harbor.Request;

internal abstract class HarborApiRequest : IHarborApiRequest
{
    private readonly NameValueCollection _headers = new();
    private readonly NameValueCollection _params = new();
    
    public abstract string GetRelativeUrl();

    public NameValueCollection GetHeaders()
    {
        return _headers;
    }

    public NameValueCollection GetParams()
    {
        return _params;
    }

    public abstract HttpMethod GetHttpMethod();

    public void SetPagination(int page, int pageSize)
    {
        if (pageSize > 100)
        {
            throw new Exception("Maximum page size is 100");
        }

        AddParam("page", page.ToString());
        AddParam("page_size", pageSize.ToString());
    }
    protected void AddParam(string key, string value)
    {
        _params.Remove(key);
        _params.Add(key, value);
    }

    protected void AddHeader(string key, string value)
    {
        _headers.Add(key, value);
    }

    public override string ToString()
    {
        return JsonSerializer.Serialize(this, GetType());
    }

    protected string ToString<T>(T obj)
    {
        return JsonSerializer.Serialize(this, typeof(T));
    }

    protected string Encode(string s)
    {
        return HttpUtility.UrlEncode(s);
    }
}