using LanguageExt.Common;

namespace VulnerabilityMetrics.DataSource.Harbor;

class VulnerabilityProvider
{
    private readonly HarborApi _harborApi;
    private readonly ProjectProvider _projectProvider;
    private readonly RepositoryProvider _repositoryProvider;

    public VulnerabilityProvider(HarborApi harborApi)
    {
        _harborApi = harborApi;
        _projectProvider = new(_harborApi);
        _repositoryProvider = new(_harborApi);
    }
    
    public async Task<Result<List<VulnerabilityReport>>> Get()
    {
        var projects = await _projectProvider.Get();
        return await projects.Match<Task<Result<List<VulnerabilityReport>>>>(async projects =>
        {
            foreach (var project in projects)
            {
                var registries = await _repositoryProvider.Get(project);
                _ = registries.Match<Result<List<VulnerabilityReport>>>(registries =>
                {
                    var newList = new List<VulnerabilityReport>();
                    foreach (var registry in registries)
                    {
                        newList.Add(new VulnerabilityReport
                        {
                            Project = project,
                            Registry = registry,
                            Tag = null,
                            Critical = 0,
                            High = 0,
                            Medium = 0,
                            Low = 0
                        });
                    }
                    return new Result<List<VulnerabilityReport>>(newList);
                }, ex => new Result<List<VulnerabilityReport>>(ex));
            }
            return new Result<List<VulnerabilityReport>>();
        }, ex => Task.FromResult(new Result<List<VulnerabilityReport>>(ex)));
    }
}