using VulnerabilityMetrics.DataSource.Harbor.Request;

namespace VulnerabilityMetrics.DataSource.Harbor;

internal class VulnerabilityProvider
{
    private readonly ArtifactProvider _artifactsProvider;
    private readonly HarborApi _harborApi;
    private readonly ProjectProvider _projectProvider;
    private readonly RepositoryProvider _repositoryProvider;

    public VulnerabilityProvider(HarborApi harborApi)
    {
        _harborApi = harborApi;
        _projectProvider = new ProjectProvider(_harborApi);
        _repositoryProvider = new RepositoryProvider(_harborApi);
        _artifactsProvider = new ArtifactProvider(_harborApi);
    }

    public async Task<List<VulnerabilityReportSeverityCounters>> Get()
    {
        var vulnerabilityReports = new List<VulnerabilityReportSeverityCounters>();

        //First get all the projects
        var projects = await _projectProvider.Get();

        //Loop the projects and get the repositories
        foreach (var project in projects)
        {
            var repositories = await _repositoryProvider.Get(project);

            //For each repository get the latest artifact for the tags that are being monitored
            foreach (var repository in repositories)
            {
                var tags = await _artifactsProvider.Get(project, repository);
                vulnerabilityReports.AddRange(await GetReports(project, repository, tags));
            }
        }

        return vulnerabilityReports;
    }

    private async Task<List<VulnerabilityReportSeverityCounters>> GetReports(string project, string repository, Dictionary<string, Artifact> tags)
    {
        var reports = new List<VulnerabilityReportSeverityCounters>();
        foreach (var tag in tags)
        {
            var vulnerabilityReport = await _harborApi.SendAsync<VulnerabilityReport>(
                new GetVulnerabilitiesRequest(project, repository, tag.Value.Digest)
            );
            var report = vulnerabilityReport.ToVulnerabilityReportSeverityCounters(project, repository, tag.Key);
            if (report is not null)
            {
                reports.Add(report);
            }
        }
        return reports;
    }
}