using System.Net;
using System.Net.Http.Headers;
using System.Text;
using VulnerabilityMetrics.DataSource.Harbor.Request;
using VulnerabilityMetrics.DataSource.Harbor.Response;

namespace VulnerabilityMetrics.DataSource.Harbor;

class HarborApi
{
    private static Sender? _sender;

    public async Task<R> SendAsync<R>(IHarborApiRequest request) where R : IResponse {
        var result = await GetSender().Send<R>(request);
        if (result is null) {
            throw new Exception("Unable to get response");
        }
        return result;
    }
    
    public async Task<List<R>> SendAsyncWithListResponse<R>(IHarborApiRequest request) where R : IApiObject {
        var result = await GetSender().SendWithListResponse<R>(request);
        if (result is null) {
            throw new Exception("Unable to get response");
        }
        return result;
    }
    
    private Sender GetSender() {
        if (_sender is not null) {
            return _sender;
        }

        var serviceCollection = new ServiceCollection();
        serviceCollection.AddHttpClient("HarborApi", c =>
        {
            c.BaseAddress = new Uri(Environment.GetEnvironmentVariable("HARBOR_API"));
            c.DefaultRequestHeaders.Add("Accept", "application/json");
            c.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", GetBasicAuthHeaderValue());
        });
        var serviceProvider = serviceCollection.BuildServiceProvider();
        var httpClientFactory = serviceProvider.GetRequiredService<IHttpClientFactory>();        
        _sender = new Sender(httpClientFactory);

        return _sender;
    }

    private string GetBasicAuthHeaderValue()
    {
        return Convert.ToBase64String(
            Encoding.ASCII.GetBytes($"{Environment.GetEnvironmentVariable("HARBOR_USERNAME")}:{Environment.GetEnvironmentVariable("HARBOR_PASSWORD")}")
        );
    }
}