using System.Collections.Specialized;
using System.Text;
using System.Text.Json;
using System.Web;
using VulnerabilityMetrics.DataSource.Harbor.Request;
using VulnerabilityMetrics.DataSource.Harbor.Response;

namespace VulnerabilityMetrics.DataSource.Harbor;

/// <summary>
///     Class that sends the actual IRequest to the given endpoint
/// </summary>
internal class Sender
{
    private static readonly HttpMethod[] HttpMethodsWithBody = {HttpMethod.Delete, HttpMethod.Patch, HttpMethod.Post, HttpMethod.Put};

    private readonly IHttpClientFactory _httpClientFactory;

    public Sender(IHttpClientFactory httpClientFactory)
    {
        _httpClientFactory = httpClientFactory;
    }

    /// <summary>
    ///     Sends a request async
    ///     ToDo: Handle none 200 requests and don't just throw an empty exception
    ///     ToDO: Handle success requests without json response
    /// </summary>
    /// <param name="request"></param>
    /// <param name="uri"></param>
    /// <typeparam name="TR"></typeparam>
    /// <returns></returns>
    /// <exception cref="Exception"></exception>
    public async Task<TR?> Send<TR>(IHarborApiRequest request) where TR : IResponse
    {
        try
        {
            var textResponse = await SendAsync(request);
            var result = JsonSerializer.Deserialize<TR>(textResponse);
            if (result is not null)
            {
                return result;
            }

            throw new Exception("Something went wrong with the API request");
        }
        catch (Exception ex)
        {
            return CreateErrorResponse<TR>(ex);
        }
    }

    public async Task<List<TR>> SendWithListResponse<TR>(IHarborApiRequest request) where TR : IApiObject
    {
        var textResponse = await SendAsync(request);
        var result = JsonSerializer.Deserialize<List<TR>>(textResponse);
        if (result is not null)
        {
            return result;
        }
        throw new Exception("Something went wrong with the API request");
    }

    private async Task<string> SendAsync(IHarborApiRequest request)
    {
        var client = _httpClientFactory.CreateClient("HarborApi");
        var response = await client.SendAsync(CreateHttpRequestMessage(client.BaseAddress, request));
        return await response.Content.ReadAsStringAsync();
    }

    /// <summary>
    ///     Creates the result in case an error occurred
    /// </summary>
    /// <param name="exception">Optional exception that occurred</param>
    /// <typeparam name="TR">Response type to construct</typeparam>
    /// <returns>Response with the error details filled in</returns>
    private static TR CreateErrorResponse<TR>(Exception? exception = null) where TR : IResponse
    {
        var errorResult = Activator.CreateInstance<TR>();
        errorResult.Code = "UnknownError";
        errorResult.Message = exception is not null ? exception.Message : "An unknown error has occurred";
        return errorResult;
    }

    /// <summary>
    ///     Creates the HttpRequestMessage to be sent by the client
    /// </summary>
    /// <param name="baseUri">Base Uri of the api to call</param>
    /// <param name="request">Request to be made</param>
    /// <returns>HttpRequestMessage that can be sent to the api</returns>
    /// <exception cref="NullReferenceException">if the base Uri is null</exception>
    private static HttpRequestMessage CreateHttpRequestMessage(Uri? baseUri, IHarborApiRequest request)
    {
        if (baseUri is null)
        {
            throw new NullReferenceException($"{nameof(baseUri)} is null");
        }

        var requestMessage = new HttpRequestMessage
        {
            RequestUri = GetNewUrl(baseUri, request.GetRelativeUrl(), request.GetParams()), Method = request.GetHttpMethod()
        };
        AddHeaders(request.GetHeaders(), requestMessage);

        if (HttpMethodsWithBody.Contains(requestMessage.Method))
        {
            requestMessage.Content = new StringContent(request.ToString()!, Encoding.UTF8, "application/json");
        }

        return requestMessage;
    }

    /// <summary>
    ///     Adds the headers to the request
    /// </summary>
    /// <param name="request">Collection with headers to add to the request</param>
    /// <param name="requestMessage">The request message to add the headers to</param>
    private static void AddHeaders(NameValueCollection headers, HttpRequestMessage requestMessage)
    {
        foreach (var key in headers.AllKeys)
        {
            requestMessage.Headers.TryAddWithoutValidation(key!, headers.Get(key));
        }
    }

    /// <summary>
    ///     Creates the full Uri (with query string parameters for the request
    /// </summary>
    /// <param name="baseUri">Base Uri of the Api to call</param>
    /// <param name="relativeUrl">Relative part of the Uri</param>
    /// <param name="queryStringParameters">Query string parameters that should be added to the Uri</param>
    /// <returns>The full Uri for the request</returns>
    private static Uri GetNewUrl(Uri baseUri, string relativeUrl, NameValueCollection queryStringParameters)
    {
        var newUrlString = baseUri + relativeUrl.Trim('/');
        if (queryStringParameters.Count.Equals(0))
        {
            return new Uri(newUrlString);
        }

        newUrlString += "?";

        // ReSharper disable once LoopCanBeConvertedToQuery
        foreach (var key in queryStringParameters.AllKeys)
        {
            newUrlString += (newUrlString.EndsWith("?") ? string.Empty : "&") + key + "=" + HttpUtility.UrlEncode(queryStringParameters.Get(key));
        }

        return new Uri(newUrlString);
    }
}