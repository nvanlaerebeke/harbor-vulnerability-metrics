using Serilog.Core;
using VulnerabilityMetrics.DataSource.Harbor;

namespace VulnerabilityMetrics.DataSource;

internal class VulnerabilityDataProvider 
{
    private readonly Logger _log;
    private const int UpdateInterval = 300;
    
    private readonly VulnerabilityProvider _vulnerabilityProvider;
    
    private PeriodicTimer? _vulnerabilityTimer;
    private List<VulnerabilityReportSeverityCounters> _vulnerabilityReports = new();
    
    public VulnerabilityDataProvider(HarborApi harborApi, Logger log)
    {
        _log = log;
        _vulnerabilityProvider = new(harborApi, log);
    }
    
    public async Task Start()
    {
        if (_vulnerabilityTimer is not null)
        {
            _log.Error("Data provider already running");
            throw new Exception("Data provider already running");
        }
        await Task.Run(async () =>
        {
            _log.Information("Starting timers");
            _log.Information("Update interval seconds: {UpdateInterval}", UpdateInterval);
            
            _vulnerabilityTimer = new PeriodicTimer(TimeSpan.FromSeconds(UpdateInterval));

            //Initial fetch
            await GetReports();
            //Start the loop timer
            while (await _vulnerabilityTimer!.WaitForNextTickAsync())
            {
                await GetReports();
            }
        });
    }

    private async Task GetReports()
    {
        _log.Information("Getting reports");
        _vulnerabilityReports = await _vulnerabilityProvider.Get();
    }

    public void Stop()
    {
        //Stop loops/timers
        _vulnerabilityTimer?.Dispose();
        _vulnerabilityTimer = null;
    }
    
    public IEnumerable<VulnerabilityReportSeverityCounters> Get()
    {
        return _vulnerabilityReports;
    }
}